---
name: "ziftrcoin"
suites:
- "precise"
architectures:
- "amd64"
packages:
- "mingw-w64"
- "g++-mingw-w64"
- "git-core"
- "unzip"
- "nsis"
- "faketime"
- "autoconf2.13"
- "libtool"
- "automake"
- "pkg-config"
- "bsdmainutils"

reference_datetime: "2013-06-01 00:00:00"
remotes:
- "url": "https://github.com/ziftrcoin/ziftrcoin.git"
  "dir": "ziftrcoin"
files:
- "qt-win32-5.2.0-gitian-r3.zip"
- "qt-win64-5.2.0-gitian-r3.zip"
- "boost-win32-1.55.0-gitian-r6.zip"
- "boost-win64-1.55.0-gitian-r6.zip"
- "ziftrcoin-deps-win32-gitian-r15.zip"
- "ziftrcoin-deps-win64-gitian-r15.zip"
- "protobuf-win32-2.5.0-gitian-r4.zip"
- "protobuf-win64-2.5.0-gitian-r4.zip"
- "gpu-qtmining-ziftr-win64.zip"
script: |
  # Defines
  export TZ=UTC
  INDIR=$HOME/build
  OPTFLAGS='-O2'
  TEMPDIR="$HOME/tempdir"
  NEEDDIST=1
  # Qt: workaround for determinism in resource ordering
  #  Qt5's rcc uses a QHash to store the files for the resource.
  #  A security fix in QHash makes the ordering of keys to be different on every run
  #  (https://qt.gitorious.org/qt/qtbase/commit/c01eaa438200edc9a3bbcd8ae1e8ded058bea268).
  #  This is good in general but qrc shouldn't be doing a traversal over a randomized container.
  #  The thorough solution would be to use QMap instead of QHash, but this requires patching Qt.
  #  For now luckily there is a test mode that forces a fixed seed.
  export QT_RCC_TEST=1
  #for BITS in 32 64; do # for architectures
    BITS=64
    #
    STAGING=$HOME/staging${BITS}
    BUILDDIR=$HOME/build${BITS}
    BINDIR=$OUTDIR/$BITS
    if [ "$BITS" == "32" ]; then
      HOST=i686-w64-mingw32
    else
      HOST=x86_64-w64-mingw32
    fi
    export PATH=$STAGING/host/bin:$PATH
    mkdir -p $STAGING $BUILDDIR $BINDIR
    #
    cd $STAGING
    unzip $INDIR/qt-win${BITS}-5.2.0-gitian-r3.zip
    unzip $INDIR/boost-win${BITS}-1.55.0-gitian-r6.zip
    unzip $INDIR/ziftrcoin-deps-win${BITS}-gitian-r15.zip
    unzip $INDIR/protobuf-win${BITS}-2.5.0-gitian-r4.zip
    unzip $INDIR/gpu-qtmining-ziftr-win${BITS}.zip
    if [ "$NEEDDIST" == "1" ]; then
      # Make source code archive which is architecture independent so it only needs to be done once
      cd $HOME/build/ziftrcoin
      ./autogen.sh
      ./configure --bindir=$OUTDIR --prefix=$STAGING --host=$HOST --with-qt-plugindir=$STAGING/plugins  --with-qt-incdir=$STAGING/include --with-qt-bindir=$STAGING/host/bin --with-boost=$STAGING --disable-maintainer-mode --with-protoc-bindir=$STAGING/host/bin --disable-dependency-tracking CPPFLAGS="-I$STAGING/include ${OPTFLAGS}" LDFLAGS="-L$STAGING/lib ${OPTFLAGS}" CXXFLAGS="-frandom-seed=ziftrcoin ${OPTFLAGS}"
      make dist
      DISTNAME=`echo ziftrcoin-*.tar.gz`
      NEEDDIST=0
    fi
    #
    # Build platform-dependent executables from source archive
    mkdir -p $BUILDDIR/distsrc
    cd $BUILDDIR/distsrc
    #
    tar --strip-components=1 -xf $HOME/build/ziftrcoin/$DISTNAME
    #
    # Copy the miner bin files into the source directory so the installer will pick it up.
    cp $STAGING/bin/minerd.exe $BUILDDIR/distsrc/
    cp $STAGING/bin/ccminer.exe $BUILDDIR/distsrc/
    cp $STAGING/bin/sgminer.exe $BUILDDIR/distsrc/
    cp $STAGING/bin/*.cl $BUILDDIR/distsrc/
    cp $STAGING/bin/*.bin $BUILDDIR/distsrc/
    #
    cp $STAGING/lib/libcurl.dll $BUILDDIR/distsrc/
    cp $STAGING/lib/libeay32.dll $BUILDDIR/distsrc/
    cp $STAGING/lib/pthreadVC2.dll $BUILDDIR/distsrc/
    cp $STAGING/lib/cudart32_65.dll $BUILDDIR/distsrc/
    cp $STAGING/lib/cudart64_65.dll $BUILDDIR/distsrc/
    cp $STAGING/lib/ssleay32.dll $BUILDDIR/distsrc/
    cp $STAGING/lib/zlib1.dll $BUILDDIR/distsrc/
    #
    ./configure --enable-upnp-default --bindir=$BINDIR --prefix=$STAGING --host=$HOST --with-qt-plugindir=$STAGING/plugins  --with-qt-incdir=$STAGING/include --with-qt-bindir=$STAGING/host/bin --with-boost=$STAGING --disable-maintainer-mode --with-protoc-bindir=$STAGING/host/bin --disable-dependency-tracking CPPFLAGS="-I$STAGING/include ${OPTFLAGS}" LDFLAGS="-L$STAGING/lib ${OPTFLAGS}" CXXFLAGS="-frandom-seed=ziftrcoin ${OPTFLAGS}"
    export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1
    export FAKETIME=$REFERENCE_DATETIME
    make $MAKEOPTS
    make deploy
    make install-strip
    cp -f ziftrcoin-*setup*.exe $BINDIR/
    unset LD_PRELOAD
    unset FAKETIME
    #
  #done # for BITS in

  # sort distribution tar file and normalize user/group/mtime information for deterministic output
  mkdir -p $OUTDIR/src
  rm -rf $TEMPDIR
  mkdir -p $TEMPDIR
  cd $TEMPDIR
  tar -xvf $HOME/build/ziftrcoin/$DISTNAME | sort | tar --no-recursion -cT /dev/stdin --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 --mtime="$REFERENCE_DATETIME" | gzip -n > $OUTDIR/src/$DISTNAME

